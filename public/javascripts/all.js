!function(){"use strict";function e(e){console.log("client sending message ",e),I.emit("message",e)}function o(o){console.log("Adding local stream"),U.src=window.URL.createObjectURL(o),C=o,e("got user media"),b&&t()}function n(e){console.log("getUserMedia error: ",e)}function t(){!j&&"undefined"!=typeof C&&R&&(r(),T.addStream(C),j=!0,console.log("isInitator",b),b&&c())}function r(){try{T=new RTCPeerConnection(null),T.onicecandidate=i,T.onaddstream=a,T.onremovestream=u,console.log("Created RTCPeerConnection")}catch(e){return console.log("Failed to create PeerConnection , exception: "+e.message),void alert("Cannot create RTCPeerConnection object")}}function i(o){console.log("handleIceCandidate event: ",o),o.candidate?e({type:"candidate",label:o.candidate.sdpMLineIndex,id:o.candidate.sdpMid,candidate:o.candidate.candidate}):console.log("End of candidates")}function a(e){console.log("Remote stream added."),M.src=window.URL.createObjectURL(e.stream),w=e.stream}function s(){console.log("createOffer() error: ",error)}function c(){console.log("sending offer to peer"),T.createOffer(d,s)}function l(){console.log("answering offer to peer"),T.createOffer(d,null,L)}function d(o){o.sdp=m(o.sdp),T.setLocalDescription(o),console.log("setLocalAndSendMessage sending message ",o),e(o)}function f(e){var o=!1;for(var n in S.iceServers)if("turn:"===S.iceServers[n].url.substr(0,5)){o=!0,y=!0;break}if(!o){console.log("Getting TURN server from ",e);var t=new XMLHTTPRequest;t.onreadystatechange=function(){if(4===t.readyState&&200===t.status){var e=JSON.parse(t.responseText);console.log("Got TURN server ",e),S.iceServers.push({url:"turn:"+e.username+"@"+e.turn,credential:e.password}),y=!0}},t.open("GET",e,!0),t.send()}}function u(e){console.log("Remote stream removed. Event:",e)}function g(){}function m(e){for(var o,n=e.split("\r\n"),t=0;t<n.length;t++)if(n[t].search(!0)){o=t;break}if(null===o)return e;for(var r=0;r<n.length;r++)if(-1!==n[r].search("opus/48000")){var i=p(n[r],/:(d+) opus\/48000/i);i&&(n[o]=v(n[o],i));break}return n=h(n,o),e=n.join("\r\n")}function p(e,o){var n=e.match(o);return n&&2===n.length?n[1]:null}function v(e,o){for(var n=e.split(" "),t=[],r=0,i=0;i<n.length;i++)3===r&&(t[r++]=o),n[i]!==o&&(t[r++]=n[i]);return t.join(" ")}function h(e,o){for(var n=e[o].split(" "),t=e.length-1;t>=0;t--){var r=p(e[t],/a=rtpmap:(\d+) CN\/d+/i);if(r){var i=n.indexOf(r);-1!==i&&n.splice(i,1),e.splice(t,1)}}return e[o]=n.join(" "),e}var R,C,T,w,y,b=!1,j=!1,S={iceServers:[{url:"stun:stun.l.google.com:19302"}]},L={mandatory:{OfferToReceiveAudio:!0,OfferToReceiveVideo:!0}},O=location.pathname.substring(1);""===O&&(O="foo");var I=io.connect();""!==O&&(console.log("Create or join room",O),I.emit("create or join",O)),I.on("created",function(e){console.log("Created room"+e),b=!0}),I.on("full",function(e){console.log("Room "+e+"is full")}),I.on("join",function(e){console.log("Another peer made request to join room "+e),console.log("This peer is the initator of room "+e+"!"),R=!0}),I.on("joined",function(e){console.log("This peer has joined room "+e),R=!0}),I.on("log",function(e){console.log.apply(console,e)}),I.on("message",function(e){if(console.log("Client recieved message: ",e),"got user media"===e)t();else if("offer"===e.type)b||j||t(),T.setRemoteDescription(new RTCSessionDescription(e)),l();else if("answer"===e.type)T.setRemoteDescription(new RTCSessionDescription(e));else if("candidate"===e.type&&j){var o=new RTCIceCandidate({sdpLineIndex:e.label,candidate:e.candidate});T.addIceCandidate(o)}else"bye"===e&&j&&g()});var U=document.getElementById("localVideo"),M=document.getElementById("remoteVideo"),x={video:!0};getUserMedia(x,o,n),console.log("Getting user media with constraints",x),"localhost"!=location.hostname&&f("https://computeengineondemand.appspot.com/turn?username=41784574&key=4080218913"),window.onbeforeunload=function(){e("bye")}}();
//# sourceMappingURL=data:application/json;base64,